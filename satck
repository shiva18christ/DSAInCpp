#include <iostream>
#define MAX 100 // Maximum size of the stack

using namespace std;

class Stack {
private:
    int arr[MAX]; // Array to store stack elements
    int top;      // Index of the top element

public:
    // Constructor
    Stack() {
        top = -1; // Initialize stack as empty
    }

    // Method to add an element to the stack
    void push(int value) {
        if (isFull()) {
            cout << "Stack overflow! Cannot push " << value << endl;
            return;
        }
        arr[++top] = value;
        cout << "Pushed " << value << " to the stack." << endl;
    }

    // Method to remove the top element from the stack
    void pop() {
        if (isEmpty()) {
            cout << "Stack underflow! Cannot pop." << endl;
            return;
        }
        cout << "Popped " << arr[top--] << " from the stack." << endl;
    }

    // Method to view the top element of the stack
    int peek() {
        if (isEmpty()) {
            cout << "Stack is empty! No top element." << endl;
            return -1; // Return an invalid value for an empty stack
        }
        return arr[top];
    }

    // Method to check if the stack is empty
    bool isEmpty() {
        return top == -1;
    }

    // Method to check if the stack is full
    bool isFull() {
        return top == MAX - 1;
    }

    // Method to display all elements of the stack
    void display() {
        if (isEmpty()) {
            cout << "Stack is empty!" << endl;
            return;
        }
        cout << "Stack elements: ";
        for (int i = 0; i <= top; i++) {
            cout << arr[i] << " ";
        }
        cout << endl;
    }
};

int main() {
    Stack stack;

    stack.push(10);
    stack.push(20);
    stack.push(30);

    stack.display();

    cout << "Top element is: " << stack.peek() << endl;

    stack.pop();
    stack.pop();

    stack.display();

    cout << "Is stack empty? " << (stack.isEmpty() ? "Yes" : "No") << endl;

    stack.pop();

    cout << "Is stack empty? " << (stack.isEmpty() ? "Yes" : "No") << endl;

    return 0;
}
